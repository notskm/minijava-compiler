
const vmt_Implementation
  :Implementation.testLookupWithIntLiteral
  :Implementation.testLookupWithVariable
  :Implementation.testLookupWithIntInParens
  :Implementation.testLookupWithVariableInParens
  :Implementation.testLookupWithLookupInParens
  :Implementation.testLookupFromMethodCall
  :Implementation.returnArray


func Main()
  t.0 = HeapAllocZ(8)
  [t.0] = :vmt_Implementation
  impl = t.0
  if impl goto :null1
    Error("null pointer")
  null1:
  t.1 = [impl]
  t.1 = [t.1+0]
  t.2 = call t.1(impl)
  PrintIntS(t.2)
  if impl goto :null2
    Error("null pointer")
  null2:
  t.3 = [impl]
  t.3 = [t.3+4]
  t.4 = call t.3(impl)
  PrintIntS(t.4)
  if impl goto :null3
    Error("null pointer")
  null3:
  t.5 = [impl]
  t.5 = [t.5+8]
  t.6 = call t.5(impl)
  PrintIntS(t.6)
  if impl goto :null4
    Error("null pointer")
  null4:
  t.7 = [impl]
  t.7 = [t.7+12]
  t.8 = call t.7(impl)
  PrintIntS(t.8)
  if impl goto :null5
    Error("null pointer")
  null5:
  t.9 = [impl]
  t.9 = [t.9+16]
  t.10 = call t.9(impl)
  PrintIntS(t.10)
  if impl goto :null6
    Error("null pointer")
  null6:
  t.11 = [impl]
  t.11 = [t.11+20]
  t.12 = call t.11(impl)
  PrintIntS(t.12)
  ret

func Implementation.testLookupWithIntLiteral(this)
  t.0 = call :AllocArray(5)
  [this+4] = t.0
  t.1 = [this+4]
  if t.1 goto :null7
    Error("null pointer")
  null7:
  t.2 = [t.1]
  t.2 = Lt(1 t.2)
  if t.2 goto :bounds1
    Error("array index out of bounds")
  bounds1:
  t.2 = MulS(1 4)
  t.2 = Add(t.2 t.1)
  [t.2+4] = 1
  t.3 = [this+4]
  if t.3 goto :null8
    Error("null pointer")
  null8:
  t.4 = [t.3]
  t.4 = Lt(1 t.4)
  if t.4 goto :bounds2
    Error("array index out of bounds")
  bounds2:
  t.4 = MulS(1 4)
  t.4 = Add(t.4 t.3)
  one = [t.4+4]
  PrintIntS(one)
  ret 0

func Implementation.testLookupWithVariable(this)
  one = 1
  t.0 = call :AllocArray(5)
  [this+4] = t.0
  t.1 = [this+4]
  if t.1 goto :null9
    Error("null pointer")
  null9:
  t.2 = [t.1]
  t.2 = Lt(1 t.2)
  if t.2 goto :bounds3
    Error("array index out of bounds")
  bounds3:
  t.2 = MulS(1 4)
  t.2 = Add(t.2 t.1)
  [t.2+4] = 2
  t.3 = [this+4]
  if t.3 goto :null10
    Error("null pointer")
  null10:
  t.4 = [t.3]
  t.4 = Lt(one t.4)
  if t.4 goto :bounds4
    Error("array index out of bounds")
  bounds4:
  t.4 = MulS(one 4)
  t.4 = Add(t.4 t.3)
  result = [t.4+4]
  PrintIntS(result)
  ret 0

func Implementation.testLookupWithIntInParens(this)
  t.0 = call :AllocArray(5)
  [this+4] = t.0
  t.1 = [this+4]
  if t.1 goto :null11
    Error("null pointer")
  null11:
  t.2 = [t.1]
  t.2 = Lt(1 t.2)
  if t.2 goto :bounds5
    Error("array index out of bounds")
  bounds5:
  t.2 = MulS(1 4)
  t.2 = Add(t.2 t.1)
  [t.2+4] = 3
  t.3 = [this+4]
  if t.3 goto :null12
    Error("null pointer")
  null12:
  t.4 = [t.3]
  t.4 = Lt(1 t.4)
  if t.4 goto :bounds6
    Error("array index out of bounds")
  bounds6:
  t.4 = MulS(1 4)
  t.4 = Add(t.4 t.3)
  result = [t.4+4]
  PrintIntS(result)
  ret 0

func Implementation.testLookupWithVariableInParens(this)
  one = 1
  t.0 = call :AllocArray(5)
  [this+4] = t.0
  t.1 = [this+4]
  if t.1 goto :null13
    Error("null pointer")
  null13:
  t.2 = [t.1]
  t.2 = Lt(1 t.2)
  if t.2 goto :bounds7
    Error("array index out of bounds")
  bounds7:
  t.2 = MulS(1 4)
  t.2 = Add(t.2 t.1)
  [t.2+4] = 4
  t.3 = [this+4]
  if t.3 goto :null14
    Error("null pointer")
  null14:
  t.4 = [t.3]
  t.4 = Lt(one t.4)
  if t.4 goto :bounds8
    Error("array index out of bounds")
  bounds8:
  t.4 = MulS(one 4)
  t.4 = Add(t.4 t.3)
  result = [t.4+4]
  PrintIntS(result)
  ret 0

func Implementation.testLookupWithLookupInParens(this)
  t.0 = call :AllocArray(5)
  [this+4] = t.0
  t.1 = call :AllocArray(5)
  arr1 = t.1
  if arr1 goto :null15
    Error("null pointer")
  null15:
  t.2 = [arr1]
  t.2 = Lt(4 t.2)
  if t.2 goto :bounds9
    Error("array index out of bounds")
  bounds9:
  t.2 = MulS(4 4)
  t.2 = Add(t.2 arr1)
  [t.2+4] = 3
  t.3 = [this+4]
  if t.3 goto :null16
    Error("null pointer")
  null16:
  t.4 = [t.3]
  t.4 = Lt(3 t.4)
  if t.4 goto :bounds10
    Error("array index out of bounds")
  bounds10:
  t.4 = MulS(3 4)
  t.4 = Add(t.4 t.3)
  [t.4+4] = 5
  t.5 = [this+4]
  if t.5 goto :null18
    Error("null pointer")
  null18:
  if arr1 goto :null17
    Error("null pointer")
  null17:
  t.6 = [arr1]
  t.6 = Lt(4 t.6)
  if t.6 goto :bounds11
    Error("array index out of bounds")
  bounds11:
  t.6 = MulS(4 4)
  t.6 = Add(t.6 arr1)
  t.7 = [t.6+4]
  t.8 = [t.5]
  t.8 = Lt(t.7 t.8)
  if t.8 goto :bounds12
    Error("array index out of bounds")
  bounds12:
  t.8 = MulS(t.7 4)
  t.8 = Add(t.8 t.5)
  result = [t.8+4]
  PrintIntS(result)
  ret 0

func Implementation.testLookupFromMethodCall(this)
  t.0 = [this]
  t.0 = [t.0+24]
  t.1 = call t.0(this 6)
  if t.1 goto :null19
    Error("null pointer")
  null19:
  t.2 = [t.1]
  t.2 = Lt(0 t.2)
  if t.2 goto :bounds13
    Error("array index out of bounds")
  bounds13:
  t.2 = MulS(0 4)
  t.2 = Add(t.2 t.1)
  result = [t.2+4]
  PrintIntS(result)
  ret 0

func Implementation.returnArray(this val)
  t.0 = call :AllocArray(5)
  ret = t.0
  if ret goto :null20
    Error("null pointer")
  null20:
  t.1 = [ret]
  t.1 = Lt(0 t.1)
  if t.1 goto :bounds14
    Error("array index out of bounds")
  bounds14:
  t.1 = MulS(0 4)
  t.1 = Add(t.1 ret)
  [t.1+4] = val
  ret ret

func AllocArray(size)
  bytes = MulS(size 4)
  bytes = Add(bytes 4)
  v = HeapAllocZ(bytes)
  [v] = size
  ret v
